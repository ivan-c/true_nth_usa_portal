"""SitePersistence Module"""
from collections import defaultdict
from flask import current_app
import json
from sqlalchemy import exc

from extensions import db
from models.fhir import FHIR_datetime
from models.intervention import INTERVENTION
from models.intervention_strategies import AccessStrategy
from models.organization import Organization


class SitePersistence(object):
    """Manage import and export of dynamic site data"""

    VERSION = '0.1'

    def __init__(self):
        self.filename = current_app.config.get(
            "PERSISTENCE_FILE", '/tmp/site_persistence_file.json')

    def _log(self, msg):
        current_app.logger.info(msg)

    def __write__(self, data):
        if data:
            with open(self.filename, 'w') as f:
                f.write(json.dumps(data, indent=2, sort_keys=True))
            self._log("Wrote site persistence to `{}`".format(self.filename))

    def __read__(self):
        with open(self.filename, 'r') as f:
            data = json.load(f)
        return data

    def __header__(self, data):
        data['resourceType'] = 'Bundle'
        data['id'] = 'SitePersistence v{}'.format(self.VERSION)
        data['meta'] = {'fhir_comments': [
            "export of dynamic site data from host",
            "{}".format(current_app.config.get('SERVER_NAME'))],
            'lastUpdated': FHIR_datetime.now()}
        data['type'] = 'document'
        return data

    def __verify_header__(self, data):
        """Make sure header conforms to what we're looking for"""
        if data.get('resourceType') != 'Bundle':
            raise ValueError("expected 'Bundle' resourceType not found")
        if data.get('id') != 'SitePersistence v{}'.format(self.VERSION):
            raise ValueError("unexpected SitePersistence version {}".format(
                self.VERSION))

    def export(self):
        """Generate single JSON file defining dynamic site objects

        Export dynamic data, such as Organizations and Access Strategies for
        import into other sites.  This does NOT export values expected
        to live in the site config file or the static set generated by the seed
        managment command.

        To import the data, use the seed command as defined in manage.py
        """
        d = self.__header__({})
        d['entry'] = []

        # Add organizations
        orgs = Organization.generate_bundle()
        d['entry'] += orgs['entry']

        # Add strategies (AKA access rules)
        for intervention in INTERVENTION:
            rules = [x.as_json() for x in
                     intervention.access_strategies]
            if rules:
                d['entry'] += rules

        self.__write__(d)

    def import_(self):
        """If persistence file is found, import the data"""
        data = self.__read__()
        self.__verify_header__(data)

        # Fragile design requires items are imported in order
        # Referenced objects must exist before import will succeed.

        objs_by_type = defaultdict(list)
        for entry in data['entry']:
            objs_by_type[entry['resourceType']].append(entry)

        # Orgs first:
        max_org_id = 0
        for o in objs_by_type['Organization']:
            org = Organization.from_fhir(o)
            max_org_id = max(max_org_id, org.id)
            existing = Organization.query.get(org.id)
            if existing:
                if o != existing.as_fhir():
                    raise ValueError("Organization {} collision on "
                                     "import".format(org.id))
                else:
                    self._log("org {} matches existing - skip "
                              "import".format(org.id))
            else:
                self._log("org {} not found - importing".format(org.id))
                db.session.add(org)
                db.session.commit()

        # Access rules next
        max_strat_id = 0
        for s in objs_by_type['AccessStrategy']:
            strat = AccessStrategy.from_json(s)
            max_strat_id = max(max_strat_id, strat.id)
            existing = AccessStrategy.query.get(strat.id)
            if existing:
                if s != existing.as_json():
                    raise ValueError("AccessStrategy {} collision on "
                                     "import".format(strat.id))
                else:
                    self._log("strategy {} matches existing - skip "
                              "import".format(org.id))
            else:
                self._log("strategy {} not found - importing".format(org.id))
                db.session.add(strat)
        db.session.commit()

        # Bump sequence numbers if necessary to avoid unique constraint
        # violations in the future, as we may have manually inserted ids
        # without using the sequence from the persistence file.
        def fix_sequence(seq_id, max_known):
            try:
                currval = db.engine.execute(
                    "select currval('{}')".format(seq_id))
            except exc.OperationalError as oe:
                if 'not yet defined' in str(oe):
                    currval = db.engine.execute(
                        "select nextval('{}')".format(seq_id))
            if currval.fetchone()[0] < max_known:
                db.engine.execute(
                    "SELECT setval('{}', {})".format(seq_id, max_org_id))

        fix_sequence('organizations_id_seq', max_org_id)
        fix_sequence('access_strategies_id_seq', max_strat_id)
        self._log("SitePersistence import complete")
