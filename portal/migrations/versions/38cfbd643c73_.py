"""empty message

Revision ID: 38cfbd643c73
Revises: 5d7a1030065e
Create Date: 2017-06-07 15:43:36.972833

"""

# revision identifiers, used by Alembic.
revision = '38cfbd643c73'
down_revision = '5d7a1030065e'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import sessionmaker

from portal.models.audit import Audit
from portal.models.role import Role
from portal.models.user import User, UserRoles


Session = sessionmaker()


def upgrade():
    bind = op.get_bind()
    session = Session(bind=bind)

    # get existing Observation.audit_id values
    audit_ids = {}
    for obs_id, audit_id in session.execute('SELECT id, audit_id FROM observations'):
        audit_ids[obs_id] = audit_id

    op.drop_constraint(u'observations_audit_id_fkey', 'observations', type_='foreignkey')
    op.drop_column('observations', 'audit_id')
    op.add_column('user_observations', sa.Column('audit_id', sa.Integer(), nullable=True))
    op.create_foreign_key(u'user_observations_audit_id_fkey', 'user_observations',
                          'audit', ['audit_id'], ['id'])

    # store existing audit_id values in UserObservations, based on observation_id
    for obs_id in audit_ids:
        session.execute('UPDATE user_observations SET audit_id = {} '
                        'WHERE observation_id = {}'.format(audit_ids[obs_id], obs_id))

    op.alter_column('user_observations', 'audit_id', nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)

    # get existing UserObservation.audit_id values
    audit_ids = {}
    for obs_id, audit_id in session.execute('SELECT observation_id, audit_id '
                                            'FROM user_observations'):
        audit_ids[obs_id] = audit_id

    op.drop_constraint(u'user_observations_audit_id_fkey', 'user_observations', type_='foreignkey')
    op.drop_column('user_observations', 'audit_id')
    op.add_column('observations',
                  sa.Column('audit_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(u'observations_audit_id_fkey', 'observations',
                          'audit', ['audit_id'], ['id'])

    # store existing audit_id values in Observations, based on obvervation id
    for obs_id in audit_ids:
        session.execute('UPDATE observations SET audit_id = {} '
                        'WHERE id = {}'.format(audit_ids[obs_id], obs_id))

    # create audits for any Observations that don't have corresponding UserObservations
    admin = User.query.filter_by(email='bob25mary@gmail.com').first()
    admin = admin or User.query.join(UserRoles
                                    ).join(Role
                                    ).filter(sa.and_(Role.id == UserRoles.role_id,
                                                     UserRoles.user_id == User.id,
                                                     Role.name == 'admin')).first()
    admin_id = admin.id

    for obs_id in session.execute('SELECT id FROM observations where audit_id IS NULL'):
        aud = Audit(user_id=admin_id, subject_id=admin_id)
        session.add(aud)
        session.commit()
        aud = session.merge(aud)
        session.execute('UPDATE observations SET audit_id = {} '
                        'WHERE id = {}'.format(aud.id, obs_id[0]))

    op.alter_column('observations', 'audit_id', nullable=False)
    # ### end Alembic commands ###
