"""Persistence Module"""
from flask import current_app
import json

from models.fhir import FHIR_datetime
from models.intervention import INTERVENTION
from models.organization import Organization

class SitePersistence(object):
    """Manage import and export of dynamic site data"""

    VERSION = '0.1'

    def __init__(self):
        self.filename = current_app.config.get(
            "PERSISTENCE_FILE", '/tmp/site_persistence_file.json')

    def __write__(self, data):
        if data:
            with open(self.filename, 'w') as f:
                f.write(json.dumps(data, indent=2, sort_keys=True))
            current_app.logger.info("Wrote site persistence to `{}`".format(
                self.filename))

    def __header__(self, data):
        data['resourceType'] = 'Bundle'
        data['id'] = 'SitePersistence v{}'.format(self.VERSION)
        data['meta'] = {'fhir_comments': [
            "export of dynamic site data from host",
            "{}".format(current_app.config.get('SERVER_NAME'))],
            'lastUpdated': FHIR_datetime.now()}
        data['type'] = 'document'
        return data

    def export(self):
        """Generate single JSON file defining dynamic site objects

        Export dynamic data, such as Organizations and Access Strategies for
        import into other sites.  This does NOT export values expected
        to live in the site config file or the static set generated by the seed
        managment command.

        To import the data, use the seed command as defined in manage.py
        """
        d = self.__header__({})
        d['entry'] = []

        # Add organizations
        orgs = Organization.generate_bundle()
        d['entry'] += orgs['entry']

        # Add strategies (AKA access rules)
        for intervention in INTERVENTION:
            rules = [x.as_bundle_element() for x in
                     intervention.access_strategies]
            if rules:
                d['entry'] += rules

        self.__write__(d)
