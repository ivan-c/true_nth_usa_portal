Configuration
*************

TruenNTH Shared Services can be configured in a number of fashions, to support
a variety of use cases.

Three primary mechanims are in place to setup the system as desired:

- `application.cfg`_
- `Site Persistence`_
- `AppText`_

application.cfg
===============

This primary configuration file lives in the `portal` source directory.
See `README <readme_link.html>`__ for initial setup of ``application.cfg``.

Values with defaults are typically defined in the ``portal.config.BaseConfig``
class.  Most are self explanitory or include inline comments for clarification.
A few worthy of special mention for the task of customizing Shared Services.

REQUIRED_CORE_DATA::

    Set to control what portions of data are considered *required* prior
    to allowing the user to transition beyond initial_queries.  Expects
    a list, with the following options:

    REQUIRED_CORE_DATA = ['name', 'dob', 'role', 'org', 'clinical', 'tou']

PERSISTENCE_FILE::

    See also Site Persistence, this controls which persistence file the
    `python manage.py seed` command uses to load persistence data.

    PERSISTENCE_FILE='https://raw.githubusercontent.com/uwcirg/TrueNTH-USA-site-config/master/site_persistence_file.json'

    For ePROMs:

    PERSISTENCE_FILE='https://raw.githubusercontent.com/uwcirg/ePROMs-site-config/master/site_persistence_file.json'

PORTAL_STYLESHEET::

    Define which stylesheet to include.  Defaults to 'css/portal.css'

    For ePROMs:

    PORTAL_STYLESHEET = 'css/eproms.css'

Site Persistence
================

The ``portal.SitePersistence`` class manages the import and export of a
number of database tables holding significant data required for a rich
experience.  This should never include any patient or personal data, but
will include codified business rules and required data to support them.

Currently this includes:

- Organizations
- Interventions
- AccessStrategies
- AppText

A site persistence file can be generated by setting the config value
`PERSISTENCE_FILE` to any writable file on the local filesystem, and executing:

```python manage.py export_site```

The resulting file can be added to a repository for ease of use by other users.
Existing repositories include:

- `TrueNTH-site-config <https://github.com/uwcirg/TrueNTH-USA-site-config>`_
- `ePROMs-site-config <https://github.com/uwcirg/ePROMs-site-config>`_

AppText
=======

To avoid near duplication of templates needing only a few minor string changes,
the ``portal.models.AppText`` class (and its surrogate ``apptext`` database
table), provide a mechanism for customizing individual strings.

In a template, in place of a static string, insert a jinja2 variable string
calling the `app_text` function, including the unique name of the string
to be customized.  For example, in the `portal.templates.layout.html` file,
the value of the title string is imported via::

    <title>{{ app_text('layout title') }}</title>

The value for such an AppText can be manually inserted in the database, or
added to the site persistence file.  Such an entry looks like::

    {
      "custom_text": "Movember ePROMs",
      "name": "layout title",
      "resourceType": "AppText"
    },

AppText can also handle positional arguments to fill in dynamic values within
a string.  These are zero indexed, and must be defined when the template
is rendered (i.e. JavaScript variables will not be properly defined until
the script is evaluated within the browser, and will therefore not work).

For example, given::

    AppText(name='ex', custom_text='Hello {0}. {1} {0}')

A template including::

    <p>{{ app_text('ex', 'Bob', 'Goodbye') }}</p>

Would render::

    <p>Hello Bob. Goodbye Bob</p>
